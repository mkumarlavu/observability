| **CloudWatch Metric Name**                    | **Datadog Metric Name**                                     | **Dynatrace Metric Name**                                 | **Dynatrace Metric Key**                                                                 | **Description**                                                                                                                                                                                                                 | **Notes**                                                                            |
| --------------------------------------------- | ----------------------------------------------------------- | --------------------------------------------------------- | ---------------------------------------------------------------------------------------- | ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- | ------------------------------------------------------------------------------------ |
| **node\_cpu\_utilization**                    | `kubernetes.cpu.usage.total / kubernetes.cpu.capacity`      | CPU usage % (host)                                        | `builtin:host.cpu.usage`                                                                 | Percentage of CPU time utilized on the host (node). A value near 100% means the CPU is fully busy.                                                                                                                              | Available for any host (VM or K8s node).                                             |
| **node\_cpu\_reserved\_capacity**             | `kubernetes.cpu.requests / kubernetes.cpu.limits`           | Pod CPU requests (by node) / Node CPU allocatable         | `builtin:kubernetes.node.requests_cpu` / `builtin:kubernetes.node.cpu_allocatable`       | Total CPU requested by all pods on the node (in millicores) compared to the allocatable CPU of that node. This indicates how much CPU is reserved versus capacity.                                                              | Kubernetes only (requires K8s integration).                                          |
| **node\_cpu\_limit**                          | `kubernetes.cpu.limit`                                      | Pod CPU limits (by node)                                  | `builtin:kubernetes.node.limits_cpu`                                                     | Total CPU limit of all pods on the node (sum of CPU cores/millicores set as limits).                                                                                                                                            | Kubernetes only.                                                                     |
| **node\_filesystem\_utilization**             | `kubernetes.filesystem.usage` (percent used)                | Disk used % (host)                                        | `builtin:host.disk.usedPct`                                                              | Percentage of disk space used on the host’s filesystem. Equivalent to 100% minus free space.                                                                                                                                    | Available for any host (monitors each disk volume).                                  |
| **node\_memory\_limit**                       | `kubernetes_state.node.memory_capacity`                     | Memory total (host)                                       | `builtin:host.mem.total`                                                                 | Total physical memory (RAM) capacity of the node/host.                                                                                                                                                                          | Available for any host (VM or K8s node).                                             |
| **node\_memory\_reserved\_capacity**          | `kubernetes_state.node.memory_capacity.total`               | Pod memory requests (by node) / Memory allocatable (node) | `builtin:kubernetes.node.requests_memory` / `builtin:kubernetes.node.memory_allocatable` | Total memory requested by all pods on the node (bytes) compared to the node’s allocatable memory capacity. Indicates reserved memory fraction.                                                                                  | Kubernetes only.                                                                     |
| **node\_memory\_utilization**                 | `kubernetes.memory.usage / kubernetes.memory.capacity`      | Memory used % (host)                                      | `builtin:host.mem.usage`                                                                 | Percentage of memory currently used on the host (used = total - available). Dynatrace OneAgent calculates this as 100% minus the available memory.                                                                              | Available for any host (VM or K8s node).                                             |
| **node\_network\_total\_bytes**               | `kubernetes.network.rx_bytes + kubernetes.network.tx_bytes` | Network bytes received/s + sent/s (host)                  | `builtin:host.net.nic.bytesRx` / `builtin:host.net.nic.bytesTx`                          | Rate of bytes received and transmitted per second by the host’s network interfaces. Summing RX and TX gives total network throughput.                                                                                           | Available for any host.                                                              |
| **node\_network\_errors**                     | `kubernetes.network.errors`                                 | Network packet errors (host)                              | `builtin:host.net.nic.packets.errors`                                                    | Number of network interface errors (packets errors) per second on the host. This includes packet send/receive errors on the node’s NICs.                                                                                        | Available for any host.                                                              |
| **cluster\_failed\_node\_count**              | `kubernetes_state.node.by_condition` (non-Ready nodes)      | Kubernetes node conditions                                | `builtin:kubernetes.node.conditions`                                                     | Reports the status of node conditions (e.g., Ready, Pressure conditions) for each node. Non-Ready or unhealthy nodes can be identified by this metric (value 0 for Ready), and counting those gives the number of failed nodes. | Kubernetes only (cluster-level overview via node conditions).                        |
| **node\_status\_condition\_ready**            | `kubernetes_state.node.by_condition` (Ready)                | Kubernetes node condition – Ready                         | `builtin:kubernetes.node.conditions`                                                     | Indicates if a node is *Ready* (value 1 for Ready, 0 if not Ready) as reported by the Kubernetes node condition metric.                                                                                                         | Kubernetes only.                                                                     |
| **node\_status\_condition\_memory\_pressure** | `kubernetes_state.node.by_condition` (MemoryPressure)       | Kubernetes node condition – MemoryPressure                | `builtin:kubernetes.node.conditions`                                                     | Indicates if a node is under **MemoryPressure** (1 if the MemoryPressure condition is true, 0 otherwise). This uses the same node conditions metric (with MemoryPressure status).                                               | Kubernetes only.                                                                     |
| **node\_status\_condition\_pid\_pressure**    | `kubernetes_state.node.by_condition` (PIDPressure)          | Kubernetes node condition – PIDPressure                   | `builtin:kubernetes.node.conditions`                                                     | Indicates if a node is under **PIDPressure** (running out of process IDs; 1 if true, 0 otherwise) via the node conditions metric.                                                                                               | Kubernetes only.                                                                     |
| **node\_status\_condition\_disk\_pressure**   | `kubernetes_state.node.by_condition` (DiskPressure)         | Kubernetes node condition – DiskPressure                  | `builtin:kubernetes.node.conditions`                                                     | Indicates if a node is under **DiskPressure** (disk storage low; 1 if true, 0 otherwise) via the node conditions metric.                                                                                                        | Kubernetes only.                                                                     |
| **node\_status\_condition\_unknown**          | `kubernetes_state.node.by_condition` (Unknown)              | Kubernetes node condition – Unknown                       | `builtin:kubernetes.node.conditions`                                                     | Indicates an **Unknown** status for node readiness (1 if the node’s Ready condition is Unknown/unreachable). This is reported through the same node conditions metric.                                                          | Kubernetes only.                                                                     |
| **cluster\_node\_count**                      | `kubernetes_state.node.count`                               | Kubernetes cluster node count                             | `builtin:kubernetes.nodes`                                                               | Total number of nodes in the cluster. This metric is aggregated at the cluster level (counts all active nodes).                                                                                                                 | Kubernetes only (cluster-level metric).                                              |
| **node\_status\_allocatable\_pods**           | `kubernetes_state.node.pods_allocatable`                    | Pod allocatable count (by node)                           | `builtin:kubernetes.node.pods_allocatable`                                               | Number of pods that can be scheduled on the node (the node’s allocatable pod capacity). Typically determined by node size and networking constraints.                                                                           | Kubernetes only.                                                                     |
| **node\_status\_capacity\_pods**              | `kubernetes_state.node.pods_capacity`                       | Pod allocatable count (by node)                           | `builtin:kubernetes.node.pods_allocatable`                                               | Maximum pods capacity of the node. (Kubernetes reports pod capacity as allocatable pods; Dynatrace uses the allocatable pods metric, which effectively represents the pod capacity.)                                            | Kubernetes only. *(Capacity and allocatable pod count are usually the same in K8s.)* |
| **node\_number\_of\_running\_pods**           | `kubernetes.pods.running`                                   | Pod count (by node)                                       | `builtin:kubernetes.node.pods`                                                           | Current number of pods running on the node. This reflects how many pods are scheduled to that node at present.                                                                                                                  | Kubernetes only.                                                                     |












| **Datadog Metric Name**                                    | **Dynatrace Equivalent Metric Name** | **Dynatrace Metric Key**                     | **Notes**                                                                                                                                                                                                                                                                   |
| ---------------------------------------------------------- | ------------------------------------ | -------------------------------------------- | --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |
| **kubernetes\_state.node.status**                          | Node conditions (status)             | `builtin:kubernetes.node.conditions`         | Indicates node status conditions (e.g. Ready, memory pressure). Dynatrace represents node health via condition flags (value 1 for condition present).                                                                                                                       |
| **kubernetes\_state.node.pods\_capacity**                  | Node – pod allocatable count         | `builtin:kubernetes.node.pods_allocatable`   | Maximum number of pods a node can schedule (pod capacity). Dynatrace uses “allocatable pods” to represent pod capacity per node.                                                                                                                                            |
| **kubernetes\_state.node.network\_bandwidth\_allocatable** | *None* (no direct metric)            | N/A                                          | No built-in Dynatrace metric for a node’s allocatable network bandwidth. Network performance is monitored via actual throughput and NIC link utilization rather than a static capacity resource.                                                                            |
| **kubernetes\_state.node.network\_bandwidth\_capacity**    | *None* (no direct metric)            | N/A                                          | No direct Dynatrace metric for total network bandwidth capacity of a node. Only real-time network usage (bytes, packets, % utilization) is captured.                                                                                                                        |
| **kubernetes.network.tx\_bytes**                           | NIC bytes sent (per second)          | `builtin:host.net.nic.bytesTx`               | Host network bytes transmitted per second. Collected by OneAgent on each node (can be scoped to Kubernetes node).                                                                                                                                                           |
| **kubernetes.network.rx\_bytes**                           | NIC bytes received (per second)      | `builtin:host.net.nic.bytesRx`               | Host network bytes received per second. Collected by OneAgent on each node.                                                                                                                                                                                                 |
| **kubernetes\_state.node.memory\_capacity.total**          | *None* (no direct cluster metric)    | N/A                                          | No single built-in metric for total cluster memory capacity. Use the sum of per-node memory metrics (e.g. sum of `host.mem.total` for all nodes) to derive cluster memory capacity. Dynatrace deprecated direct cluster-wide capacity metrics in favor of per-node metrics. |
| **kubernetes\_state.node.memory\_capacity**                | Memory total (per node)              | `builtin:host.mem.total`                     | Total physical memory of the node (RAM capacity). This host metric (via OneAgent) corresponds to a node’s memory capacity.                                                                                                                                                  |
| **kubernetes\_state.node.memory\_allocatable.total**       | *None* (no direct cluster metric)    | N/A                                          | No built-in metric for total cluster allocatable memory. Use an aggregation of Node – memory allocatable across all nodes to get cluster-level value. (Cluster-level “total memory” metrics were removed in favor of summing node metrics.)                                 |
| **kubernetes\_state.node.memory\_allocatable**             | Node – memory allocatable            | `builtin:kubernetes.node.memory_allocatable` | Allocatable memory on a node (bytes available for pods). Kubernetes-only metric provided via Dynatrace’s Kubernetes integration (OneAgent/ActiveGate).                                                                                                                      |
| **kubernetes\_state.node.cpu\_allocatable**                | Node – CPU allocatable               | `builtin:kubernetes.node.cpu_allocatable`    | Allocatable CPU of a node in millicores (CPU available to pods). Kubernetes node metric via OneAgent/ActiveGate.                                                                                                                                                            |
| **kubernetes\_state.node.cpu\_allocatable.total**          | *None* (no direct cluster metric)\*  | N/A                                          | No single Dynatrace metric for total cluster CPU allocatable. Aggregate the Node – CPU allocatable metric across all nodes to obtain cluster-wide CPU capacity. (Older cluster CPU metrics were deprecated in favor of per-node metrics.)        
|











| CloudWatch metric                                           | Datadog metric                                                         | Dynatrace — **Available?** | Dynatrace — **metric key** (OneAgent / ActiveGate v1.270+)                      |
| ----------------------------------------------------------- | ---------------------------------------------------------------------- | -------------------------- | ------------------------------------------------------------------------------- |
| `apiserver_dropped_requests_total`                          | `kube_apiserver.apiserver_dropped_requests_total`                      | **Y**                      | `builtin:kubernetes.apiserver.dropped_requests_total` ([Dynatrace Docs][1])     |
| `apiserver_request_terminations_total`                      | `kube_apiserver.apiserver_request_terminations_total`                  | **Y**                      | `builtin:kubernetes.apiserver.request_terminations_total` ([Dynatrace Docs][1]) |
| `etcd_request_errors_total`                                 | `kube_apiserver.etcd_request_errors_total`                             | **Y**                      | `builtin:kubernetes.etcd.request_errors_total` ([Dynatrace Docs][1])            |
| `apiserver_APIServiceRegistrationController_depth`          | `kube_apiserver.APIServiceRegistrationController_depth`                | **N**                      | N/A                                                                             |
| `apiserver_current_inqueue_requests`                        | `kube_apiserver.flowcontrol_current_inqueue_requests`                  | **Y**                      | `builtin:kubernetes.apiserver.current_inqueue_requests` ([Dynatrace Docs][1])   |
| `apiserver_current_inflight_requests`                       | `kube_apiserver.current_inflight_requests`                             | **Y**                      | `builtin:kubernetes.apiserver.current_inflight_requests` ([Dynatrace Docs][1])  |
| `etcd_requests_total`                                       | `kube_apiserver.etcd_requests_total`                                   | **Y**                      | `builtin:kubernetes.etcd.requests_total` ([Dynatrace Docs][1])                  |
| `apiserver_request_total`                                   | `kube_apiserver.apiserver_request_total`                               | **Y**                      | `builtin:kubernetes.apiserver.request_total` ([Dynatrace Docs][1])              |
| `apiserver_longrunning_requests`                            | `kube_apiserver.longrunning_gauge`                                     | **Y**                      | `builtin:kubernetes.apiserver.longrunning_requests` ([Dynatrace Docs][1])       |
| `etcd_request_duration_seconds`                             | `kube_apiserver.etcd_request_duration_seconds.count`                   | **Y**                      | `builtin:kubernetes.etcd.request_duration_seconds` ([Dynatrace Docs][1])        |
| `rest_client_requests_total`                                | `kube_apiserver.rest_client_requests_total`                            | **Y**                      | `builtin:kubernetes.rest_client.requests_total` ([Dynatrace Docs][1])           |
| `apiserver_request_duration_seconds`                        | `kube_apiserver.request_duration_seconds.count`                        | **Y**                      | `builtin:kubernetes.apiserver.request_duration_seconds` ([Dynatrace Docs][1])   |
| (**no CW**) “Registered Watchers”                           | `kube_apiserver.registered_watchers`                                   | **N**                      | N/A                                                                             |
| `apiserver_storage_objects`                                 | `kube_apiserver.storage_objects`                                       | **Y**                      | `builtin:kubernetes.apiserver.storage_objects` ([Dynatrace Docs][1])            |
| `apiserver_admission_controller_admission_duration_seconds` | `kube_apiserver.admission_controller_admission_duration_seconds.count` | **Y**                      | `builtin:kubernetes.apiserver.admission_duration_seconds` ([Dynatrace Docs][1]) |
| `apiserver_storage_size_bytes`                              | `kube_apiserver.etcd.db.total_size`                                    | **Y**                      | `builtin:kubernetes.apiserver.storage_size_bytes` ([Dynatrace Docs][1])         |

[1]: https://docs.dynatrace.com/docs/observe/infrastructure-monitoring/container-platform-monitoring/kubernetes-monitoring/alert-on-kubernetes-issues "Alert on common Kubernetes/OpenShift issues — Dynatrace Docs"







| **CloudWatch Metric Name**                                                         | **Threshold Justification**                                                                            | **Datadog Metric Name**                                                                                                            | **Dynatrace Metric (Name – Availability – Unit – Monitor/Alert)**    | **Description**                                                                                        | **Impact**  | **Recommended by AWS** | **Available in Datadog** | **Golden Signals** | **Monitor** | **Alert (Y/N)** | **CIB SRE Enablement** |
| ---------------------------------------------------------------------------------- | ------------------------------------------------------------------------------------------------------ | ---------------------------------------------------------------------------------------------------------------------------------- | -------------------------------------------------------------------- | ------------------------------------------------------------------------------------------------------ | ----------- | ---------------------- | ------------------------ | ------------------ | ----------- | --------------- | ---------------------- |
| **pod\_number\_of\_container\_restarts**                                           | (DUPLICATE)                                                                                            | `kubernetes.containers.restarts`                                                                                                   | **builtin\:kubernetes.container.restarts** – Yes – Count – Yes       | The number of times the container has been restarted                                                   | Operational | Y                      | Y                        | Errors             | Y           | Y               | Y                      |
| **node\_interface\_network\_rx\_dropped**                                          | Default set to 0. Ideally no rx packets are dropped                                                    | `kubernetes.network.rx_dropped`                                                                                                    | **builtin\:host.net.nic.packets.droppedRx** – Yes – per second – Yes | The amount of RX (received) packets dropped per second                                                 | Operational | Y                      | Y                        | Errors             | Y           | N               | N                      |
| **node\_interface\_network\_rx\_errors**                                           | *(blank)*                                                                                              | `kubernetes.network.rx_errors`                                                                                                     | **builtin\:host.net.nic.packets.errorsRx** – Yes – per second – Yes  | The amount of RX (received) errors per second                                                          | Operational | Y                      | Y                        | Errors             | Y           | N               | N                      |
| **node\_interface\_network\_tx\_errors**                                           | *(blank)*                                                                                              | `kubernetes.network.tx_errors`                                                                                                     | **builtin\:host.net.nic.packets.errorsTx** – Yes – per second – Yes  | The amount of TX (transmitted) errors per second                                                       | Operational | Y                      | Y                        | Errors             | Y           | N               | N                      |
| **node\_interface\_network\_tx\_dropped**                                          | Default set to 0. Ideally no tx packets are dropped                                                    | `kubernetes.network.tx_dropped`                                                                                                    | **builtin\:host.net.nic.packets.droppedTx** – Yes – per second – Yes | The amount of TX (transmitted) packets dropped per second                                              | Operational | Y                      | Y                        | Errors             | Y           | N               | N                      |
| **(no CloudWatch metric)**<br>*Liveness probe failure %*                           | Default set to 0%. Ideally no liveness probe failures (percentage of liveness probes that failed)      | `kubernetes.liveness_probe.failure.total / (kubernetes.liveness_probe.failure.total + kubernetes.liveness_probe.success.total)`    | **No equivalent** – No – N/A – No                                    | Percentage of liveness probes for a container that failed                                              | Operational | N                      | Y                        | Errors             | Y           | Y               | N                      |
| **(no CloudWatch metric)**<br>*Readiness probe failure %*                          | Default set to 0%. Ideally no readiness probe failures (percentage of readiness probes that failed)    | `kubernetes.readiness_probe.failure.total / (kubernetes.readiness_probe.failure.total + kubernetes.readiness_probe.success.total)` | **No equivalent** – No – N/A – No                                    | Percentage of readiness probes for a container that failed                                             | Operational | N                      | Y                        | Errors             | Y           | Y               | N                      |
| **(no CloudWatch metric)**<br>*Startup probe failure %*                            | Default set to 0%. Ideally no startup probe failures (percentage of startup probes that failed)        | `kubernetes.startup_probe.failure.total / (kubernetes.startup_probe.failure.total + kubernetes.startup_probe.success.total)`       | **No equivalent** – No – N/A – No                                    | Percentage of startup probes for a container that failed                                               | Operational | N                      | Y                        | Errors             | Y           | Y               | N                      |
| **(no CloudWatch metric)**<br>*kubernetes.kubelet.runtime.errors*                  | *(blank)*                                                                                              | `kubernetes.kubelet.runtime.errors`                                                                                                | **No equivalent** – No – N/A – No                                    | Cumulative number of runtime operations errors                                                         | Operational | N                      | Y                        | Errors             | Y           | N               | N                      |
| **kubernetes.cpu.cfs.throttled.periods**                                           | *(blank)* (Number of throttled period intervals)                                                       | `kubernetes.cpu.cfs.throttled.periods`                                                                                             | **builtin\:containers.cpu.throttledMilliCores** – Yes – mCores – Yes | Number of throttled CPU period intervals (CPU CFS throttling events)                                   | Operational | N                      | Y                        | Saturation         | N           | N               | N                      |
| **pod\_cpu\_utilization\_over\_pod\_limit**                                        | Default set to 80%. Recommended threshold ≤ 80% (to allow time before impact) <br>*Unit info: Percent* | `kubernetes.cpu.usage.total`                                                                                                       | **builtin\:containers.cpu.usagePercent** – Yes – Percent – Yes       | The percentage of CPU cores used (CPU usage as a percentage of pod’s CPU limit)                        | Operational | Y                      | Y                        | Saturation         | Y           | Y               | Y                      |
| **pod\_memory\_utilization\_over\_pod\_limit**                                     | Default set to 80%. Recommended threshold ≤ 80% (to allow time before impact) <br>*Unit info: Percent* | `kubernetes.memory.usage_pct`                                                                                                      | **builtin\:containers.memory.usagePercent** – Yes – Percent – Yes    | The percentage of memory used per pod (relative to its memory limit)                                   | Operational | Y                      | Y                        | Saturation         | Y           | Y               | Y                      |
| **node\_number\_of\_running\_containers**                                          | *(blank)*                                                                                              | `kubernetes.containers.running`                                                                                                    | **No equivalent** – No – N/A – No                                    | The number of running containers                                                                       | Operational | N                      | Y                        | Traffic            | N           | N               | N                      |
| **(no CloudWatch metric)**<br>*kubernetes.kubelet.runtime.operations*              | *(blank)*                                                                                              | `kubernetes.kubelet.runtime.operations`                                                                                            | **No equivalent** – No – N/A – No                                    | The number of runtime operations of each type (e.g., container\_status, create\_container, exec, etc.) | Operational | N                      | Y                        | Traffic            | N           | N               | N                      |
| **node\_diskio\_io\_service\_bytes\_total** (read)                                 | *(blank)*                                                                                              | `kubernetes.io.read_bytes`                                                                                                         | **builtin\:host.disk.bytesRead** – Yes – Bytes/second – Yes          | The amount of bytes read from the disk per second                                                      | Operational | Y                      | Y                        | Traffic            | N           | N               | N                      |
| **node\_diskio\_io\_service\_bytes\_total** (write)                                | *(blank)*                                                                                              | `kubernetes.io.write_bytes`                                                                                                        | **builtin\:host.disk.bytesWritten** – Yes – Bytes/second – Yes       | The amount of bytes written to the disk per second                                                     | Operational | Y                      | Y                        | Traffic            | N           | N               | N                      |
| **pod\_network\_rx\_bytes**                                                        | *(blank)*                                                                                              | `kubernetes.network.rx_bytes`                                                                                                      | **No equivalent** – No – N/A – No                                    | The amount of bytes per second received (network inbound throughput)                                   | Operational | Y                      | Y                        | Traffic            | Y           | N               | N                      |
| **pod\_network\_tx\_bytes**                                                        | *(blank)*                                                                                              | `kubernetes.network.tx_bytes`                                                                                                      | **No equivalent** – No – N/A – No                                    | The amount of bytes per second transmitted (network outbound throughput)                               | Operational | Y                      | Y                        | Traffic            | Y           | N               | N                      |
| **(no CloudWatch metric)**<br>*kubernetes.kubelet.runtime.operations.duration.sum* | *(blank)*                                                                                              | `kubernetes.kubelet.runtime.operations.duration.sum`                                                                               | **No equivalent** – No – N/A – No                                    | The sum of durations of all runtime operations (for calculating average operation latency)             | Operational | N                      | Y                        | Latency            | N           | N               | N                      |
| **(no CloudWatch metric)**<br>*kubernetes.kubelet.pod.worker.duration*             | *(blank)*                                                                                              | `kubernetes.kubelet.pod.worker.duration`                                                                                           | **No equivalent** – No – N/A – No                                    | Duration in microseconds to sync a single pod (by operation type: create, update, or sync)             | Operational | N                      | Y                        | Latency            | N           | N               | N                      |
| **(no CloudWatch metric)**<br>*kubernetes.kubelet.pod.start.duration*              | *(blank)*                                                                                              | `kubernetes.kubelet.pod.start.duration`                                                                                            | **No equivalent** – No – N/A – No                                    | Duration in microseconds for a single pod to go from pending to running                                | Operational | N                      | Y                        | Latency            | N           | N               | N                      |
| **kubernetes.ephemeral\_storage.limits**                                           | *(blank)*                                                                                              | `kubernetes.ephemeral_storage.limits`                                                                                              | **No equivalent** – No – N/A – No                                    | Ephemeral storage limit of the container (if set)                                                      | Operational | N                      | Y                        | Saturation         | N           | N               | N                      |
| **kubernetes.ephemeral\_storage.requests**                                         | *(blank)*                                                                                              | `kubernetes.ephemeral_storage.requests`                                                                                            | **No equivalent** – No – N/A – No                                    | Ephemeral storage request of the container (if set)                                                    | Operational | N                      | Y                        | Saturation         | N           | N               | N                      |
| **kubernetes.ephemeral\_storage.usage**                                            | *(blank)*                                                                                              | `kubernetes.ephemeral_storage.usage`                                                                                               | **No equivalent** – No – N/A – No                                    | Ephemeral storage usage of the pod                                                                     | Operational | Y                      | Y                        | Saturation         | Y           | N               | N                      |


